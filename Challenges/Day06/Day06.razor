@page "/Day06"
@page "/Day6"
@inject DataFetcher dataFetcher

<PageTitle>AoC 2023 - Day @dayNumber</PageTitle>

<ChallengeContainer DayNumber=@dayNumber 
                    @bind-ChallengeInput=@inputData
                    @bind-TestInput=@testData
                    SolveChallenge1=@SolveChallenge1
                    SolveChallenge2=@SolveChallenge2
                    Challenge1Result=@challenge1Result.ToString()
                    Challenge2Result=@challenge2Result.ToString()
/>

    @code {
    private readonly int dayNumber = 6;
    string inputData = string.Empty;
    string testData = string.Empty;
    private int? challenge1Result = null;
    private long? challenge2Result = null;

    Dictionary<int, int> races = new();
    (long time, long distance) bigRace = (0, 0);

    private void SolveChallenge1()
    {
        ParseInput();
        challenge1Result = null;
        int accumulator = 1;

        foreach (int race in races.Keys)
        {
            int numberOfWaysToWin = 0;
            for (int i = 1; i < race; i++)
            {
                if ((i * (race - i)) > races[race])
                {
                    numberOfWaysToWin++;
                }
            }

            accumulator *= numberOfWaysToWin;
        }

        challenge1Result = accumulator;
    }

    private void SolveChallenge2()
    {
        ParseInput();

        challenge2Result = null;

        long numberOfWaysToWin = 0;
        long halfOfRaces = bigRace.time / 2;

        // 277_133_813_491_063

        for (long i = 1; i < (bigRace.time / 2); i++)
        {
            if (i == 20000000)
            {
                Console.WriteLine("1_000_000");
            }
            long value = i * (bigRace.time - i);
            if (value > bigRace.distance)
            {
                numberOfWaysToWin = halfOfRaces - i;
                break;
            }
        }

        numberOfWaysToWin *= 2;

        if (halfOfRaces % 2 == 1)
        {
            numberOfWaysToWin++;
        }

        challenge2Result = numberOfWaysToWin;
    }

    private void ParseInput()
    {
        races = new();
        bigRace = (0, 0);

        string[] lines = inputData.Split("\n");

        string[] times = lines[0].Split().Where(x => x != "").ToArray();
        string[] distances = lines[1].Split().Where(x => x != "").ToArray();

        for (int i = 1; i < times.Length; i++)
        {
            races.Add(int.Parse(times[i]), int.Parse(distances[i]));
        }

        long bigRaceTime = long.Parse(string.Join("", times[1..]));
        long bigRaceDistance = long.Parse(string.Join("", distances[1..]));

        bigRace = (bigRaceTime, bigRaceDistance);
    }
    
    private async Task LoadData()
    {
        inputData = await dataFetcher.FetchDataAsync(dayNumber);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
}
